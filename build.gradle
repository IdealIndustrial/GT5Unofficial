buildscript {
 repositories {
        mavenCentral()

        maven {
            name 'forge'
            url 'https://maven.minecraftforge.net'
        }
        maven {
            // GTNH ForgeGradle Fork
            name = "GTNH Maven"
            url = "http://jenkins.usrv.eu:8081/nexus/content/groups/public/"
        }
        maven {
            name 'sonatype'
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        maven {
            name 'Scala CI dependencies'
            url 'https://repo1.maven.org/maven2/'
        }
    }
    dependencies {
         classpath 'net.minecraftforge.gradle:ForgeGradle:1.2.11'
    }
}

apply plugin: 'forge'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'java-library'

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}


version = "${config.gt.version}"
group = "GT_II-edition"
archivesBaseName = "GT_II-edition"

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    options.encoding = "UTF-8"
}

minecraft {
    version = "${config.minecraft.version}-${config.forge.version}"
    runDir = "eclipse"
}

configurations {
    provided
    embedded
    compile.extendsFrom provided, embedded
}

idea.module.inheritOutputDirs = true

repositories {
    maven {
        name = "gt"
        url = "https://gregtech.overminddl1.com/"
    }
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven/"
    }
    maven {
        name = "ic2, forestry"
        url = "https://maven2.ic2.player.to/"
    }
    maven { // EnderIO & EnderCore
        name = 'tterrag Repo'
        url = "http://maven.tterrag.com"
    }
    maven { // TConstruct
        name = 'DVS1 Maven FS'
        url = 'http://dvs1.progwml6.com/files/maven'
    }
    maven { // AppleCore
        url = "http://www.ryanliptak.com/maven/"
    }
    maven { // GalacticGreg, YAMCore,..
        name = 'UsrvDE'
        url = "http://jenkins.usrv.eu:8081/nexus/content/repositories/releases/"
    }
    ivy {
        name = 'gtnh_download_source_stupid_underscore_typo'
        artifactPattern("http://downloads.gtnewhorizons.com/Mods_for_Jenkins/[module]_[revision].[ext]")
    }
    ivy {
        name = 'gtnh_download_source'
        artifactPattern("http://downloads.gtnewhorizons.com/Mods_for_Jenkins/[module]-[revision].[ext]")
    }
}

dependencies {
  //  provided ("appeng:appliedenergistics2:
//${config.ae2.version}:dev") {
      //  exclude module: '*'
  //  }
   /* provided "codechicken:CodeChickenLib:${config.minecraft.version}-${config.codechickenlib.version}:dev"
	provided "codechicken:CodeChickenCore:${config.minecraft.version}-${config.codechickencore.version}:dev"
    provided "codechicken:NotEnoughItems:${config.minecraft.version}-${config.nei.version}:dev"*/
  //  provided "net.industrial-craft:industrialcraft-2:${config.ic2.version}:dev"
    provided "net.sengir.forestry:forestry_${config.minecraft.version}:${config.forestry.version}:dev"
    provided "applecore:AppleCore:${config.applecore.version}:api"
  //  provided "com.enderio.core:EnderCore:${config.enderiocore.version}:dev"
 /*   provided ("com.enderio:EnderIO:${config.enderio.version}:dev") {
        transitive = false
    }*/
    // provided name: 'buildcraft', version: config.buildcraft.version, classifier: "dev", ext: 'jar'
    // provided name: 'CoFHLib', version: config.cofhlib.version, ext: 'jar'
    // provided name: 'CoFHCore', version: config.cofhcore.version, ext: 'jar'
    // provided name: 'Railcraft', version: config.railcraft.version, ext: 'jar'
    // provided name: 'IC2NuclearControl', version: config.nc.version, ext: 'jar'
    // provided name: 'ImmersiveEngineering', version: config.immeng.version, ext: 'jar'
    // provided name: 'magneticraft', version: config.magneticraft.version, ext: 'jar'nonRuntimeLibs
    provided fileTree(dir: 'libs', include: '*.jar')
    compileOnly fileTree(dir: 'nonRuntimeLibs', include: '*.jar')
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
	exclude '**/Thumbs.db'
}

jar {
		manifest {
		attributes 'FMLCorePlugin': 'idealindustrial.hooks.HookLoader'
		attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
    manifest {
        //attributes 'FMLCorePlugin': 'WhateverLoaderClass'
        //attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
}

task resolveAllDependencies {
    description "Resolves all transitive dependencies (e.g. to build offline later)."

    doLast {
        configurations.all {
            it.resolve()
        }
    }
}

artifacts {
    archives devJar
}
